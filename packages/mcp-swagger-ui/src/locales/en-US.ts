export default {
  // Common
  common: {
    all: "All",
    confirm: "Confirm",
    cancel: "Cancel",
    save: "Save",
    delete: "Delete",
    edit: "Edit",
    add: "Add",
    create: "Create",
    update: "Update",
    reset: "Reset",
    search: "Search",
    filter: "Filter",
    clear: "Clear",
    refresh: "Refresh",
    loading: "Loading...",
    success: "Success",
    error: "Error",
    warning: "Warning",
    info: "Info",
    yes: "Yes",
    no: "No",
    close: "Close",
    back: "Back",
    next: "Next",
    previous: "Previous",
    submit: "Submit",
    import: "Import",
    export: "Export",
    upload: "Upload",
    download: "Download",
    copy: "Copy",
    paste: "Paste",
    cut: "Cut",
    settings: "Settings",
    help: "Help",
    about: "About",
    version: "Version",
    status: "Status",
    online: "Online",
    offline: "Offline",
    connected: "Connected",
    disconnected: "Disconnected",
    healthy: "Healthy",
    unhealthy: "Unhealthy",
    expand: "Expand",
    collapse: "Collapse",
    refreshSuccess: "Refresh successful",
    refreshFailed: "Refresh failed",
    active: "Active",
    inactive: "Inactive",
    enabled: "Enabled",
    disabled: "Disabled",
    running: "Running",
    stopped: "Stopped",
    pending: "Pending",
    failed: "Failed",
    completed: "Completed",
    processing: "Processing",
    saving: "Saving...",
    deleting: "Deleting...",
    updating: "Updating...",
    creating: "Creating...",
    connecting: "Connecting...",
    disconnecting: "Disconnecting...",
    testing: "Testing...",
    validating: "Validating...",
    importing: "Importing...",
    exporting: "Exporting...",
    uploading: "Uploading...",
    downloading: "Downloading...",
  },

  // Navigation menu
  menu: {
    dashboard: "Dashboard",
    servers: "Server Management",
    "server-detail": "Server Details",
    openapi: "OpenAPI Management",
    tester: "API Testing",
    auth: "Authentication",
    config: "Configuration",
    logs: "Logs",
    monitoring: "Monitoring",
    ai: "AI Assistant",
  },

  // Breadcrumb navigation
  breadcrumb: {
    home: "Home",
  },

  // Theme switching
  theme: {
    light: "Light Theme",
    dark: "Dark Theme",
    auto: "Follow System",
    switched: "Switched to {theme} theme",
  },

  // Language switching
  language: {
    chinese: "简体中文",
    english: "English",
    switched: "Language switched to {language}",
  },

  // Dashboard
  dashboard: {
    title: "System Overview",
    systemStatus: "System Status",
    performanceMetrics: "Performance Metrics",
    recentActivity: "Recent Activity",
    activeServers: "Active Servers",
    totalRequests: "Total Requests",
    errorRate: "Error Rate",
    responseTime: "Response Time",
    cpuUsage: "CPU Usage",
    memoryUsage: "Memory Usage",
    networkTraffic: "Network Traffic",
    uptime: "Uptime",
    lastUpdate: "Last Update",
    refresh: "Refresh Data",
    viewDetails: "View Details",
    noData: "No Data",
    loadingData: "Loading data...",
  },

  // Server management
  servers: {
    title: "Server Management",
    createServer: "Create Server",
    editServer: "Edit Server",
    deleteServer: "Delete Server",
    serverList: "Server List",
    serverDetails: "Server Details",
    serverName: "Server Name",
    serverType: "Server Type",
    serverUrl: "Server URL",
    serverPort: "Port",
    serverDescription: "Description",
    serverConfig: "Configuration",
    serverStatus: "Status",
    serverHealth: "Health",
    serverMetrics: "Metrics",
    serverLogs: "Server Logs",
    serverTools: "Available Tools",
    startServer: "Start Server",
    stopServer: "Stop Server",
    restartServer: "Restart Server",
    testConnection: "Test Connection",
    viewLogs: "View Logs",
    downloadLogs: "Download Logs",
    noServers: "No Servers",
    createFirstServer: "Create your first server",
    deleteConfirm:
      'Are you sure you want to delete server "{name}"? This action cannot be undone.',
    deleteSuccess: "Server deleted successfully",
    createSuccess: "Server created successfully",
    updateSuccess: "Server updated successfully",
    startSuccess: "Server started successfully",
    stopSuccess: "Server stopped successfully",
    connectionTest: "Connection Test",
    connectionSuccess: "Connection test successful",
    connectionFailed: "Connection test failed",
    invalidUrl: "Please enter a valid server URL",
    nameRequired: "Please enter server name",
    urlRequired: "Please enter server URL",
  },

  // OpenAPI management
  openapi: {
    title: "OpenAPI Management",
    specList: "Specification List",
    createSpec: "Create Specification",
    editSpec: "Edit Specification",
    deleteSpec: "Delete Specification",
    importSpec: "Import Specification",
    exportSpec: "Export Specification",
    validateSpec: "Validate Specification",
    convertToMcp: "Convert to MCP",
    specName: "Specification Name",
    specDescription: "Description",
    specVersion: "Version",
    specFormat: "Format",
    specContent: "Content",
    uploadFile: "Upload File",
    pasteContent: "Paste Content",
    fetchFromUrl: "Fetch from URL",
    enterUrl: "Please enter OpenAPI specification URL",
    dragOrClick: "Drag files here or click to select",
    confirmUpload: "Confirm Upload",
    searchPlaceholder: "Search documents...",
    importFromUrl: "Import from URL",
    uploading: "Uploading...",
    docName: "Document Name",
    docDescription: "Document Description",
    docUrl: "Document URL",
    enterDocName: "Please enter document name",
    enterDocDescription: "Please enter document description",
    enterDocUrl: "Please enter document URL",
    urlFormats: "Supported URL formats",
    autoNameTip: "Document name will be automatically extracted from URL",
    selectDocument: "Select Document",
    validationResult: "Validation Result",
    conversionResult: "Conversion Result",
    preview: "Preview",
    tools: "Tools",
    schemas: "Schemas",
    paths: "Paths",
    parameters: "Parameters",
    responses: "Responses",
    noSpecs: "No Specifications",
    createFirstSpec: "Create your first OpenAPI specification",
    deleteConfirm: 'Are you sure you want to delete specification "{name}"?',
    validationSuccess: "Specification validation passed",
    validationFailed: "Specification validation failed",
    conversionSuccess: "MCP conversion successful",
    conversionFailed: "MCP conversion failed",
    invalidFormat: "Invalid OpenAPI format",
    nameRequired: "Please enter specification name",
    contentRequired: "Please enter specification content",
    // Document management
    documentList: "Document List",
    createDocument: "Create Document",
    editDocument: "Edit Document",
    deleteDocument: "Delete Document",
    documentName: "Document Name",
    documentDescription: "Document Description",
    uploadTime: "Upload Time",
    lastModified: "Last Modified",
    actions: "Actions",
    validate: "Validate",
    duplicate: "Duplicate",
    download: "Download",
    convertMcp: "Convert to MCP",
    // Validation
    validation: {
      specNameRequired: "Please enter specification name",
      nameLength: "Name length cannot exceed 50 characters",
      versionRequired: "Please enter version",
      docNameRequired: "Please enter document name",
      urlRequired: "Please enter URL",
      urlInvalid: "Please enter a valid URL",
    },
    // Status
    status: {
      valid: "Valid",
      invalid: "Invalid",
      pending: "Pending",
      unknown: "Unknown",
    },
    // Progress
    progress: {
      created: "Created",
      pending: "Pending",
      validating: "Validating",
      completed: "Completed",
    },
    // Messages
    documentNotFound: "Document not found",
    confirmDeleteDocument: 'Are you sure you want to delete document "{name}"?',
    confirmDelete: "Confirm Delete",
    deleteSuccess: 'Document "{name}" deleted successfully',
    deleteFailed: "Delete failed: {error}",
    updateSuccess: "Document information updated successfully",
    saveFailed: "Save failed: {error}",
    refreshSuccess: "Document list refreshed successfully",
    refreshFailed: "Refresh failed: {error}",
    duplicateSuccess: "Specification duplicated successfully",
    duplicateFailed: "Duplicate failed: {error}",
    confirmDeleteSpec:
      'Are you sure you want to delete specification "{name}"?',
    deleteSpecSuccess: "Specification deleted successfully",
    enterContentFirst: "Please enter OpenAPI specification content first",
    downloadSuccess: "Download successful",
    validationSuccessWithWarnings:
      "Specification validation passed, parsed {apiCount} API endpoints with {warningCount} warnings",
    validationSuccessDetail:
      "Specification validation passed, parsed {apiCount} API endpoints with no errors or warnings",
    validationFailedDetail:
      "Specification validation failed, found {errorCount} errors",
    validationErrors: "Validation Errors",
    validationError: "Validation failed: {error}",
    createSuccess: "Document created successfully",
    createFailed: "Create failed: {error}",
    uploadSuccessValidate:
      "Document uploaded successfully, please click validate button to validate",
    uploadFailed: "Upload failed: {error}",
    fileReadFailed: "File read failed",
    selectDocumentFirst:
      "Please select a document or enter OpenAPI specification content first",
    fixErrorsFirst:
      "Current specification validation failed, please fix errors first",
    convertSuccess: "Successfully converted to {count} MCP tools",
    convertFailed: "Convert failed: {error}",
    importedFromUrl: "Document imported from URL",
    importSuccessValidate:
      "Document imported successfully, please click validate button to validate",
    importFailed: "Import failed: {error}",
    testingTool: "Testing tool: {name}",
    testToolFailed: "Tool test failed: {error}",
    // API details
    apiDetail: "API Details",
    path: "Path",
    method: "Method",
    summary: "Summary",
    description: "Description",
    operationId: "Operation ID",
    tags: "Tags",
    none: "None",
    // Templates
    templates: {
      getUserList: "Get User List",
      success: "Success",
      getProductList: "Get Product List",
      userLogin: "User Login",
      loginSuccess: "Login Successful",
    },
    unknownError: "Unknown Error",
    parseContentFailed: "Failed to parse OpenAPI content",
    fetchDocumentFailed: "Failed to fetch document: {error}",
    supportedFormats: "Supported Formats",
  },

  // API testing
  tester: {
    title: "API Testing",
    selectTool: "Select Tool",
    toolList: "Tool List",
    testCase: "Test Case",
    testCases: "Test Cases",
    createTestCase: "Create Test Case",
    editTestCase: "Edit Test Case",
    deleteTestCase: "Delete Test Case",
    runTest: "Run Test",
    testResult: "Test Result",
    testHistory: "Test History",
    toolName: "Tool Name",
    toolDescription: "Tool Description",
    toolParameters: "Tool Parameters",
    parameterName: "Parameter Name",
    parameterType: "Parameter Type",
    parameterValue: "Parameter Value",
    required: "Required",
    optional: "Optional",
    testName: "Test Name",
    testDescription: "Test Description",
    expectedResult: "Expected Result",
    actualResult: "Actual Result",
    testStatus: "Test Status",
    executionTime: "Execution Time",
    requestData: "Request Data",
    responseData: "Response Data",
    errorMessage: "Error Message",
    noTools: "No Tools Available",
    noTestCases: "No Test Cases",
    createFirstTest: "Create your first test case",
    deleteConfirm: 'Are you sure you want to delete test case "{name}"?',
    deleteSuccess: "Test case deleted successfully",
    createSuccess: "Test case created successfully",
    updateSuccess: "Test case updated successfully",
    testPassed: "Test Passed",
    testFailed: "Test Failed",
    testRunning: "Test Running...",
    invalidParameters: "Parameter validation failed",
    nameRequired: "Please enter test case name",
    toolRequired: "Please select a tool to test",
  },

  // Authentication
  auth: {
    title: "Authentication Management",
    authList: "Authentication List",
    createAuth: "Create Authentication",
    editAuth: "Edit Authentication",
    deleteAuth: "Delete Authentication",
    authName: "Authentication Name",
    authType: "Authentication Type",
    authDescription: "Description",
    apiKey: "API Key",
    bearerToken: "Bearer Token",
    basicAuth: "Basic Authentication",
    oauth2: "OAuth 2.0",
    username: "Username",
    password: "Password",
    token: "Token",
    clientId: "Client ID",
    clientSecret: "Client Secret",
    authUrl: "Authorization URL",
    tokenUrl: "Token URL",
    scopes: "Scopes",
    testAuth: "Test Authentication",
    authStatus: "Status",
    expiresAt: "Expires At",
    renewToken: "Renew Token",
    revokeToken: "Revoke Token",
    noAuth: "No Authentication",
    createFirstAuth: "Create your first authentication",
    deleteConfirm: 'Are you sure you want to delete authentication "{name}"?',
    deleteSuccess: "Authentication deleted successfully",
    createSuccess: "Authentication created successfully",
    updateSuccess: "Authentication updated successfully",
    testSuccess: "Authentication test successful",
    testFailed: "Authentication test failed",
    renewSuccess: "Token renewed successfully",
    revokeSuccess: "Token revoked successfully",
    invalidCredentials: "Invalid credentials",
    nameRequired: "Please enter authentication name",
    typeRequired: "Please select authentication type",
  },

  // Configuration
  config: {
    title: "Configuration Management",
    exportConfig: "Export Configuration",
    importConfig: "Import Configuration",
    configBackup: "Configuration Backup",
    configRestore: "Configuration Restore",
    migrationWizard: "Migration Wizard",
    selectItems: "Select Items",
    exportFormat: "Export Format",
    exportOptions: "Export Options",
    includeServers: "Include Server Configuration",
    includeAuth: "Include Authentication Configuration",
    includeSettings: "Include System Settings",
    includeTestCases: "Include Test Cases",
    exportFile: "Export File",
    importFile: "Import File",
    selectFile: "Select File",
    dragDrop: "Drag and drop files here or click to select",
    previewConfig: "Preview Configuration",
    conflictResolution: "Conflict Resolution",
    overwrite: "Overwrite",
    merge: "Merge",
    skip: "Skip",
    backupName: "Backup Name",
    backupDescription: "Backup Description",
    backupSize: "Backup Size",
    backupDate: "Backup Date",
    createBackup: "Create Backup",
    restoreBackup: "Restore Backup",
    deleteBackup: "Delete Backup",
    noBackups: "No Backups",
    exportSuccess: "Configuration exported successfully",
    importSuccess: "Configuration imported successfully",
    backupSuccess: "Backup created successfully",
    restoreSuccess: "Configuration restored successfully",
    invalidFile: "Invalid configuration file",
    conflictDetected: "Configuration conflicts detected",
    nameRequired: "Please enter backup name",
  },

  // Logs
  logs: {
    title: "Log Viewer",
    logLevel: "Log Level",
    logSource: "Log Source",
    logTime: "Time",
    logMessage: "Message",
    logDetails: "Details",
    filterLogs: "Filter Logs",
    searchLogs: "Search Logs",
    clearLogs: "Clear Logs",
    exportLogs: "Export Logs",
    downloadLogs: "Download Logs",
    realtime: "Real-time Logs",
    autoScroll: "Auto Scroll",
    maxLines: "Max Lines",
    refresh: "Refresh",
    pause: "Pause",
    resume: "Resume",
    debug: "Debug",
    info: "Info",
    warn: "Warning",
    error: "Error",
    fatal: "Fatal",
    system: "System",
    server: "Server",
    api: "API",
    noLogs: "No Logs",
    loadingLogs: "Loading logs...",
    exportSuccess: "Logs exported successfully",
    clearConfirm: "Are you sure you want to clear all logs?",
    clearSuccess: "Logs cleared successfully",
  },

  // Monitoring
  monitoring: {
    title: "System Monitoring",
    overview: "Monitoring Overview",
    metrics: "Performance Metrics",
    alerts: "Alerts",
    reports: "Monitoring Reports",
    cpuUsage: "CPU Usage",
    memoryUsage: "Memory Usage",
    diskUsage: "Disk Usage",
    networkIn: "Network In",
    networkOut: "Network Out",
    requestRate: "Request Rate",
    errorRate: "Error Rate",
    responseTime: "Response Time",
    throughput: "Throughput",
    activeConnections: "Active Connections",
    queueLength: "Queue Length",
    threshold: "Threshold",
    alertRule: "Alert Rule",
    alertLevel: "Alert Level",
    alertStatus: "Alert Status",
    alertTime: "Alert Time",
    alertMessage: "Alert Message",
    acknowledged: "Acknowledged",
    resolved: "Resolved",
    triggered: "Triggered",
    createAlert: "Create Alert",
    editAlert: "Edit Alert",
    deleteAlert: "Delete Alert",
    acknowledgeAlert: "Acknowledge Alert",
    resolveAlert: "Resolve Alert",
    noAlerts: "No Alerts",
    noMetrics: "No Monitoring Data",
    refreshInterval: "Refresh Interval",
    timeRange: "Time Range",
    last5min: "Last 5 minutes",
    last1hour: "Last 1 hour",
    last24hours: "Last 24 hours",
    last7days: "Last 7 days",
  },

  // AI Assistant
  ai: {
    title: "AI Assistant Configuration",
    aiType: "AI Type",
    aiModel: "AI Model",
    aiConfig: "AI Configuration",
    configWizard: "Configuration Wizard",
    templates: "Configuration Templates",
    createTemplate: "Create Template",
    editTemplate: "Edit Template",
    deleteTemplate: "Delete Template",
    templateName: "Template Name",
    templateDescription: "Template Description",
    baseUrl: "Base URL",
    modelName: "Model Name",
    apiKey: "API Key",
    maxTokens: "Max Tokens",
    temperature: "Temperature",
    systemPrompt: "System Prompt",
    testConnection: "Test Connection",
    generateConfig: "Generate Configuration",
    copyConfig: "Copy Configuration",
    exportConfig: "Export Configuration",
    openai: "OpenAI",
    anthropic: "Anthropic",
    google: "Google",
    custom: "Custom",
    noTemplates: "No Templates",
    createFirstTemplate: "Create your first template",
    deleteConfirm: 'Are you sure you want to delete template "{name}"?',
    deleteSuccess: "Template deleted successfully",
    createSuccess: "Template created successfully",
    updateSuccess: "Template updated successfully",
    testSuccess: "Connection test successful",
    testFailed: "Connection test failed",
    configGenerated: "Configuration generated successfully",
    configCopied: "Configuration copied to clipboard",
    nameRequired: "Please enter template name",
    modelRequired: "Please enter model name",
    apiKeyRequired: "Please enter API key",
  },

  // Error messages
  error: {
    networkError: "Network Error",
    serverError: "Server Error",
    unauthorized: "Unauthorized",
    forbidden: "Forbidden",
    notFound: "Not Found",
    timeout: "Request Timeout",
    badRequest: "Bad Request",
    internalError: "Internal Error",
    unknownError: "Unknown Error",
    validationError: "Validation Error",
    connectionFailed: "Connection Failed",
    operationFailed: "Operation Failed",
    saveError: "Save Failed",
    loadError: "Load Failed",
    deleteError: "Delete Failed",
    updateError: "Update Failed",
    createError: "Create Failed",
    importError: "Import Failed",
    exportError: "Export Failed",
    copyError: "Copy Failed",
    parseError: "Parse Failed",
    retryOperation: "Retry Operation",
    contactSupport: "Contact Support",
    loginFailed: "Login failed",
    registerFailed: "Registration failed",
  },

  // Success messages
  success: {
    operationSuccess: "Operation Successful",
    saveSuccess: "Save Successful",
    loadSuccess: "Load Successful",
    deleteSuccess: "Delete Successful",
    updateSuccess: "Update Successful",
    createSuccess: "Create Successful",
    importSuccess: "Import Successful",
    exportSuccess: "Export Successful",
    copySuccess: "Copy Successful",
    connectionSuccess: "Connection Successful",
    testSuccess: "Test Successful",
    validationSuccess: "Validation Successful",
    configurationSuccess: "Configuration Successful",
    welcomeBack: "Welcome back, {username}!",
    checkEmailVerification:
      "Registration successful, please check your email for verification",
    loggedOut: "Logged out",
    logoutSuccess: "You have successfully logged out",
    profileInDevelopment: "Profile feature is under development",
    settingsInDevelopment: "Account settings feature is under development",
  },

  // Form validation
  validation: {
    required: "This field is required",
    minLength: "Please enter at least {min} characters",
    maxLength: "Please enter no more than {max} characters",
    email: "Please enter a valid email address",
    url: "Please enter a valid URL",
    number: "Please enter a valid number",
    integer: "Please enter a valid integer",
    positive: "Please enter a number greater than 0",
    range: "Please enter a number between {min} and {max}",
    pattern: "Invalid format",
    unique: "This value already exists, please enter a different value",
  },

  // Pagination
  pagination: {
    total: "Total {total} items",
    page: "Page {current} of {total}",
    pageSize: "Items per page",
    items: "items",
    goto: "Go to",
    prev: "Previous",
    next: "Next",
    first: "First",
    last: "Last",
  },

  // Time format
  time: {
    justNow: "Just now",
    minutesAgo: "{count} minutes ago",
    hoursAgo: "{count} hours ago",
    daysAgo: "{count} days ago",
    weeksAgo: "{count} weeks ago",
    monthsAgo: "{count} months ago",
    yearsAgo: "{count} years ago",
    today: "Today",
    yesterday: "Yesterday",
    tomorrow: "Tomorrow",
    thisWeek: "This week",
    lastWeek: "Last week",
    thisMonth: "This month",
    lastMonth: "Last month",
    thisYear: "This year",
    lastYear: "Last year",
  },

  // User Authentication
  userAuth: {
    // Login page
    login: {
      title: "User Login",
      subtitle: "Welcome back, please sign in to your account",
      username: "Username",
      email: "Email Address",
      password: "Password",
      usernameOrEmail: "Username or Email",
      enterUsername: "Please enter username",
      enterEmail: "Please enter email address",
      enterPassword: "Please enter password",
      rememberMe: "Remember me",
      forgotPassword: "Forgot password?",
      loginButton: "Sign In",
      loggingIn: "Signing in...",
      noAccount: "Don't have an account?",
      signUp: "Sign up now",
      loginSuccess: "Login successful",
      loginFailed: "Login failed",
      invalidCredentials: "Invalid username or password",
      accountLocked: "Account has been locked",
      accountDisabled: "Account has been disabled",
      sessionExpired: "Session expired, please sign in again",
    },

    // Register page
    register: {
      title: "User Registration",
      subtitle: "Create your new account",
      username: "Username",
      email: "Email Address",
      password: "Password",
      confirmPassword: "Confirm Password",
      enterUsername: "Please enter username",
      enterEmail: "Please enter email address",
      enterPassword: "Please enter password",
      confirmPasswordPlaceholder: "Please enter password again",
      agreeToTerms: "I agree to the",
      termsOfService: "Terms of Service",
      privacyPolicy: "Privacy Policy",
      registerButton: "Sign Up",
      registering: "Signing up...",
      hasAccount: "Already have an account?",
      signIn: "Sign in now",
      registerSuccess: "Registration successful",
      registerFailed: "Registration failed",
      emailExists: "Email address already registered",
      usernameExists: "Username already taken",
      weakPassword: "Password is too weak",
      passwordMismatch: "Passwords do not match",
      mustAgreeTerms: "Please agree to the Terms of Service and Privacy Policy",
    },

    // Password strength
    passwordStrength: {
      label: "Password Strength",
      weak: "Weak",
      medium: "Medium",
      strong: "Strong",
      requirements: {
        length: "At least 8 characters",
        number: "Contains numbers",
        lowercase: "Contains lowercase letters",
        uppercase: "Contains uppercase letters",
        special: "Contains special characters",
      },
    },

    // User info
    user: {
      profile: "Profile",
      accountSettings: "Account Settings",
      logout: "Sign Out",
      avatar: "Avatar",
      displayName: "Display Name",
      bio: "Bio",
      location: "Location",
      website: "Website",
      joinDate: "Join Date",
      lastLogin: "Last Login",
      changePassword: "Change Password",
      changeEmail: "Change Email",
      deleteAccount: "Delete Account",
      logoutConfirm: "Are you sure you want to sign out?",
      logoutSuccess: "Successfully signed out",
    },

    // Form validation
    validation: {
      usernameRequired: "Please enter username",
      usernameMinLength: "Username must be at least 3 characters",
      usernameMaxLength: "Username must be no more than 20 characters",
      usernameInvalid:
        "Username can only contain letters, numbers and underscores",
      emailRequired: "Please enter email address",
      emailInvalid: "Please enter a valid email address",
      passwordRequired: "Please enter password",
      passwordMinLength: "Password must be at least 6 characters",
      passwordMaxLength: "Password must be no more than 50 characters",
      confirmPasswordRequired: "Please confirm password",
      passwordNotMatch: "Passwords do not match",
      termsRequired: "Please agree to the Terms of Service and Privacy Policy",
    },

    // Error messages
    errors: {
      networkError:
        "Network connection error, please check your network settings",
      serverError: "Server error, please try again later",
      unauthorized: "Unauthorized access, please sign in again",
      forbidden: "Access forbidden",
      userNotFound: "User does not exist",
      invalidToken: "Invalid access token",
      tokenExpired: "Access token has expired",
      refreshTokenExpired: "Refresh token has expired, please sign in again",
      tooManyAttempts: "Too many login attempts, please try again later",
      accountNotVerified: "Account not verified, please check your email",
      unknownError: "Unknown error, please contact administrator",
    },
  },
};
