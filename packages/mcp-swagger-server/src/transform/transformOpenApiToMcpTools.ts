import { join } from 'path';
import { parseFromFile, parseFromString, transformToMCPTools } from 'mcp-swagger-parser';
import type { MCPTool, ValidationError, AuthConfig } from 'mcp-swagger-parser';

/**
 * ‰∏ªËΩ¨Êç¢ÂáΩÊï∞ - ‰ΩøÁî®Êñ∞ÁöÑ mcp-swagger-parser
 */
export async function transformOpenApiToMcpTools(
  swaggerFilePath?: string,
  baseUrl?: string,
  openApiData?: any,
  authConfig?: AuthConfig,
  customHeaders?: any,
  debugHeaders?: boolean,
  operationFilter?: any
): Promise<MCPTool[]> {
  try {
    let parseResult: any;
    
    if (openApiData) {
      // Â¶ÇÊûúÊèê‰æõ‰∫Ü OpenAPI Êï∞ÊçÆÔºåÁõ¥Êé•‰ΩøÁî®
      console.log(`üîÑ Processing provided OpenAPI data...`);
      const dataString = typeof openApiData === 'string' ? openApiData : JSON.stringify(openApiData);
      parseResult = await parseFromString(dataString, {
        strictMode: false,
        resolveReferences: true,
        validateSchema: true
      });
    } else {
      // ÈªòËÆ§Ë∑ØÂæÑ
      const defaultPath = join(__dirname, '../swagger_json_file/swagger.json');
      const filePath = swaggerFilePath || defaultPath;
      
      console.log(`üîÑ Loading OpenAPI specification from: ${filePath}`);
      // ‰ΩøÁî®Êñ∞ÁöÑËß£ÊûêÂô®Ëß£Êûê OpenAPI ËßÑËåÉ
      parseResult = await parseFromFile(filePath, {
        strictMode: false,
        resolveReferences: true,
        validateSchema: true
      });
    }
    
    // Ê£ÄÊü•Ëß£ÊûêÊòØÂê¶ÊàêÂäü
    if (!parseResult.validation.valid) {
      console.warn('‚ö†Ô∏è OpenAPI spec validation warnings:');
      parseResult.validation.errors.forEach((error: ValidationError) => {
        console.warn(`  - ${error.path}: ${error.message} (${error.code})`);
      });
    }
    
    console.log(`‚úÖ Loaded OpenAPI spec: ${parseResult.spec.info.title} v${parseResult.spec.info.version}`);
    console.log(`üìä Found ${Object.keys(parseResult.spec.paths).length} API paths`);
    
    // Ë∞ÉËØïËæìÂá∫ÔºöÊòæÁ§∫operationFilter‰ø°ÊÅØ
    console.log(`\n[DEBUG] MCPÂ∑•ÂÖ∑ËΩ¨Êç¢ÈÖçÁΩÆ:`);
    if (operationFilter) {
      console.log(`- ‰ΩøÁî®operationFilterËøõË°åÊé•Âè£ËøáÊª§`);
      console.log(`- operationFilterËØ¶ÊÉÖ:`, JSON.stringify(operationFilter, null, 2));
      
      // ÊòæÁ§∫ËøáÊª§Âô®ÁöÑÂÖ∑‰ΩìÈÖçÁΩÆ
      if (operationFilter.methods) {
        console.log(`- ÊñπÊ≥ïËøáÊª§: include=${operationFilter.methods.include?.join(', ') || 'N/A'}, exclude=${operationFilter.methods.exclude?.join(', ') || 'N/A'}`);
      }
      if (operationFilter.paths) {
        console.log(`- Ë∑ØÂæÑËøáÊª§: include=${operationFilter.paths.include?.length || 0}‰∏™Ë∑ØÂæÑ, exclude=${operationFilter.paths.exclude?.length || 0}‰∏™Ë∑ØÂæÑ`);
      }
      if (operationFilter.operationIds) {
        console.log(`- Êìç‰ΩúIDËøáÊª§: include=${operationFilter.operationIds.include?.length || 0}‰∏™ID, exclude=${operationFilter.operationIds.exclude?.length || 0}‰∏™ID`);
      }
      if (operationFilter.customFilter) {
        console.log(`- ‰ΩøÁî®Ëá™ÂÆö‰πâËøáÊª§ÂáΩÊï∞`);
      }
    } else {
      console.log(`- Êú™ËÆæÁΩÆoperationFilterÔºåÂ∞ÜËΩ¨Êç¢ÊâÄÊúâÊé•Âè£`);
    }
    
    // ËΩ¨Êç¢‰∏∫ MCP Â∑•ÂÖ∑
    const tools = transformToMCPTools(parseResult.spec, {
      baseUrl,
      includeDeprecated: false,
      requestTimeout: 30000,
      pathPrefix: '',
      authConfig, // ‰º†ÈÄíËÆ§ËØÅÈÖçÁΩÆ
      customHeaders, // ‰º†ÈÄíËá™ÂÆö‰πâËØ∑Ê±ÇÂ§¥ÈÖçÁΩÆ
      debugHeaders, // ‰º†ÈÄíË∞ÉËØïÈÄâÈ°π
      operationFilter // ‰º†ÈÄíÊìç‰ΩúËøáÊª§ÈÖçÁΩÆ
    });

    // Ë∞ÉËØïËæìÂá∫ÔºöÊòæÁ§∫ÊúÄÁªàËΩ¨Êç¢ÁªìÊûú
    console.log(`\n[DEBUG] MCPÂ∑•ÂÖ∑ËΩ¨Êç¢ÁªìÊûú:`);
    console.log(`- ÂéüÂßãAPIË∑ØÂæÑÊï∞Èáè: ${Object.keys(parseResult.spec.paths).length}`);
    console.log(`- ÊúÄÁªàÁîüÊàêÁöÑMCPÂ∑•ÂÖ∑Êï∞Èáè: ${tools.length}`);
    
    if (operationFilter && tools.length > 0) {
      console.log(`- ËΩ¨Êç¢ÂêéÁöÑÂ∑•ÂÖ∑ÂàóË°®:`);
      tools.forEach((tool, index) => {
        console.log(`  ${index + 1}. ${tool.name} (${tool.description || 'No description'})`);
      });
    }
    
    console.log(`üéâ Generated ${tools.length} MCP tools`);
    
    return tools;
    
  } catch (error) {
    console.error('‚ùå Failed to transform OpenAPI to MCP tools:', error);
    throw error;
  }
}